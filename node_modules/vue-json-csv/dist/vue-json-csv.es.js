import _ from 'lodash';
import Download from 'downloadjs';
import PapaParse from 'papaparse';

//

var cleaningData = function (data, fields, labels) {
  if (_.isUndefined(fields) && _.isUndefined(labels)) {
    return data;
  }

  var parseLabelsArg = function () {
    if (_.isObject(labels)) {
      var labelBindings = labels;

      labels = function (item, key) {
        return labelBindings[key] || key;
      };
    }

    if (_.isFunction(labels)) {
      var changeLabel = labels;

      labels = function (item) {
        return _.mapKeys(item, changeLabel);
      };
    }

    if (!_.isFunction(labels) && !_.isUndefined(labels)) {
      throw new Error('Labels needs to be an Object or function(item, key)');
    }
  };

  var parseFieldsArg = function () {
    if (_.isFunction(fields) || _.isObject(fields) && !_.isArray(fields)) {
      var fieldsToKeep = fields;

      fields = function (item) {
        return _.pickBy(item, fieldsToKeep);
      };
    }

    if (_.isArray(fields)) {
      var fieldToKeep = fields;

      fields = function (item) {
        return _.pick(item, fieldToKeep);
      };
    }

    if (!_.isFunction(fields) && !_.isUndefined(fields)) {
      throw new Error('Fields needs to be an array or function(item, key)');
    }
  };

  parseLabelsArg();
  parseFieldsArg();

  if (_.isUndefined(fields)) {
    fields = function (item) { return item; };
  }

  if (_.isUndefined(labels)) {
    labels = function (item) { return item; };
  }

  return _.map(data, function (item) { return labels(fields(item)); });
};

var script = {
  name: 'JsonCSV',
  props: {
    /**
     * Json to download
     */
    data: {
      type: Array,
      required: true
    },

    /**
     * fields inside the Json Object that you want to export
     * if no given, all the properties in the Json are exported
     * Can either be an array or a function
     */
    fields: {
      required: false
    },

    /**
     * filename to export, default: data.csv
     */
    name: {
      type: String,
      default: 'data.csv'
    },

    /**
     * Delimiter for the CSV file
     */
    delimiter: {
      type: String,
      default: ',',
      required: false
    },

    /**
     * Should the module add SEP={delimiter}
     *
     * Useful for opening file with Excel
     */
    separatorExcel: {
      type: Boolean,
      default: false
    },

    /**
     * Labels for columns
     *
     * Object or function
     */
    labels: {
      required: false
    },

    /**
     * Used only for testing purposes
     */
    testing: {
      required: false,
      default: false
    }
  },
  computed: {
    // unique identifier
    idName: function idName() {
      var now = new Date().getTime();
      return 'export_' + now;
    },

    exportableData: function exportableData() {
      var filteredData = cleaningData(this.data, this.fields, this.labels);

      if (!filteredData.length) {
        return null;
      }

      return filteredData;
    }

  },
  methods: {
    generate: function generate() {
      this.$emit('export-started');
      var dataExport = this.exportableData;

      if (!dataExport) {
        console.error('No data to export');
        return;
      }

      var csv = PapaParse.unparse(dataExport, {
        delimiter: this.delimiter
      });

      if (this.separatorExcel) {
        csv = 'SEP=' + this.delimiter + '\r\n' + csv;
      }

      this.$emit('export-finished');

      if (!this.testing) {
        Download(csv, this.name, 'application/csv');
      }
    }

  }
};

/* script */
            var __vue_script__ = script;
            
/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    { attrs: { id: _vm.idName }, on: { click: _vm.generate } },
    [
      _vm._t("default", [
        _vm._v("\n        Download " + _vm._s(_vm.name) + "\n    ")
      ])
    ],
    2
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  var __vue_inject_styles__ = function (inject) {
    if (!inject) { return }
    inject("data-v-2658fada_0", { source: "\ndiv[data-v-2658fada] {\n    display: inline;\n}\n", map: {"version":3,"sources":["/home/travis/build/Belphemur/vue-json-csv/src/JsonCSV.vue"],"names":[],"mappings":";AAkLA;IACA,gBAAA;CACA","file":"JsonCSV.vue","sourcesContent":["<template>\n    <div\n            :id=\"idName\"\n            @click=\"generate\"\n    >\n        <slot>\n            Download {{name}}\n        </slot>\n    </div>\n</template>\n\n<script>\n  import _ from 'lodash'\n  import Download from 'downloadjs'\n  import PapaParse from 'papaparse'\n\n\n  const cleaningData = (data, fields, labels) => {\n\n    if (_.isUndefined(fields) && _.isUndefined(labels)) {\n      return data\n    }\n\n    let parseLabelsArg = function () {\n      if (_.isObject(labels)) {\n        const labelBindings = labels\n        labels = (item, key) => {\n          return labelBindings[key] || key\n        }\n      }\n\n      if (_.isFunction(labels)) {\n        const changeLabel = labels\n        labels = (item) => {\n          return _.mapKeys(item, changeLabel)\n        }\n      }\n\n      if (!_.isFunction(labels) && !_.isUndefined(labels)) {\n        throw new Error('Labels needs to be an Object or function(item, key)')\n      }\n    }\n\n    let parseFieldsArg = function () {\n\n      if (_.isFunction(fields) || (_.isObject(fields) && !_.isArray(fields))) {\n        const fieldsToKeep = fields\n        fields = (item) => {\n          return _.pickBy(item, fieldsToKeep)\n        }\n      }\n\n      if (_.isArray(fields)) {\n        const fieldToKeep = fields\n        fields = (item) => {\n          return _.pick(item, fieldToKeep)\n        }\n      }\n\n      if (!_.isFunction(fields) && !_.isUndefined(fields)) {\n        throw new Error('Fields needs to be an array or function(item, key)')\n      }\n    }\n\n\n    parseLabelsArg()\n    parseFieldsArg()\n\n    if (_.isUndefined(fields)) {\n      fields = (item) => item\n    }\n\n    if (_.isUndefined(labels)) {\n      labels = (item) => item\n    }\n\n    return _.map(data, (item) => labels(fields(item)))\n\n  }\n\n  export default {\n    name: 'JsonCSV',\n    props: {\n      /**\n       * Json to download\n       */\n      data: {\n        type: Array,\n        required: true\n      },\n      /**\n       * fields inside the Json Object that you want to export\n       * if no given, all the properties in the Json are exported\n       * Can either be an array or a function\n       */\n      fields: {\n        required: false\n      },\n      /**\n       * filename to export, default: data.csv\n       */\n      name: {\n        type: String,\n        default: 'data.csv'\n      },\n      /**\n       * Delimiter for the CSV file\n       */\n      delimiter: {\n        type: String,\n        default: ',',\n        required: false\n      },\n      /**\n       * Should the module add SEP={delimiter}\n       *\n       * Useful for opening file with Excel\n       */\n      separatorExcel: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * Labels for columns\n       *\n       * Object or function\n       */\n      labels: {\n        required: false\n      },\n      /**\n       * Used only for testing purposes\n       */\n      testing : {\n        required: false,\n        default: false\n      }\n    },\n    computed: {\n      // unique identifier\n      idName () {\n        const now = new Date().getTime()\n        return 'export_' + now\n      },\n      exportableData () {\n        const filteredData = cleaningData(this.data, this.fields, this.labels)\n        if (!filteredData.length) {\n          return null\n        }\n\n        return filteredData\n\n      }\n    },\n    methods: {\n      generate () {\n        this.$emit('export-started')\n        const dataExport = this.exportableData\n\n        if (!dataExport) {\n          console.error('No data to export')\n          return\n        }\n\n        let csv = PapaParse.unparse(dataExport, {delimiter: this.delimiter})\n        if (this.separatorExcel) {\n          csv = 'SEP=' + this.delimiter + '\\r\\n' + csv\n        }\n        this.$emit('export-finished')\n        if(!this.testing) {\n          Download(csv, this.name, 'application/csv')\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\n    div {\n        display: inline;\n    }\n</style>"]}, media: undefined });

  };
  /* scoped */
  var __vue_scope_id__ = "data-v-2658fada";
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(
    template, style, script$$1,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/home/travis/build/Belphemur/vue-json-csv/src/JsonCSV.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    {
      var hook;
      if (style) {
        hook = function(context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook !== undefined) {
        if (component.functional) {
          // register for functional component in vue file
          var originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context)
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }

    return component
  }
  /* style inject */
  function __vue_create_injector__() {
    var head = document.head || document.getElementsByTagName('head')[0];
    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
    var isOldIE =
      typeof navigator !== 'undefined' &&
      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

    return function addStyle(id, css) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

      if (!style.ids.includes(id)) {
        var code = css.source;
        var index = style.ids.length;

        style.ids.push(id);

        if (isOldIE) {
          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
        }

        if (!style.element) {
          var el = style.element = document.createElement('style');
          el.type = 'text/css';

          if (css.media) { el.setAttribute('media', css.media); }
          if (isOldIE) {
            el.setAttribute('data-group', group);
            el.setAttribute('data-next-index', '0');
          }

          head.appendChild(el);
        }

        if (isOldIE) {
          index = parseInt(style.element.getAttribute('data-next-index'));
          style.element.setAttribute('data-next-index', index + 1);
        }

        if (style.element.styleSheet) {
          style.parts.push(code);
          style.element.styleSheet.cssText = style.parts
            .filter(Boolean)
            .join('\n');
        } else {
          var textNode = document.createTextNode(code);
          var nodes = style.element.childNodes;
          if (nodes[index]) { style.element.removeChild(nodes[index]); }
          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
          else { style.element.appendChild(textNode); }
        }
      }
    }
  }
  /* style inject SSR */
  

  
  var JsonCSV = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    __vue_create_injector__,
    undefined
  )

export default JsonCSV;
